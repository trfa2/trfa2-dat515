services:
  # Web application
  app:
    build: .
    environment:
      - DB_HOST=database
      - DB_USER=webuser
      - DB_PASSWORD=webpass
      - DB_NAME=webapp
      - REDIS_HOST=cache
    depends_on:
      database:
        condition: service_healthy
      cache:
        condition: service_started
    restart: unless-stopped
    networks:
      - app-network

  # Database
  database:
    image: mysql:8.0
    environment:
      # TODO: Set the database credentials
      # These should match the environment variables in the app service
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: 
      MYSQL_USER: 
      MYSQL_PASSWORD: 
    volumes:
      - db_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      # TODO: Add a health check for the database
      # with appropriate parameters
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 
      retries: 
      start_period: 
      interval: 
    restart: unless-stopped
    networks:
      # TODO: Add it to the same network as the application

  # Redis cache
  cache:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - cache_data:/data
    healthcheck:
      # TODO: Add a health check for the database
      # with appropriate parameters
      test: ["CMD", "redis-cli", "ping"]
      timeout: 
      retries: 
      start_period: 
      interval: 
    restart: unless-stopped
    networks:
      # TODO: Add it to the same network as the application

  # Reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      # TODO: It depends on the app service, so add it here
    restart: unless-stopped
    networks:
      # TODO: Add it to the same network as the application

volumes:
  db_data:
  cache_data:

networks:
  app-network:
    driver: bridge
